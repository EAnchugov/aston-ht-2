{
	"info": {
		"_postman_id": "3e449c12-cb60-4833-9d4d-88609875bd60",
		"name": "New Collection",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json",
		"_exporter_id": "25929252"
	},
	"item": [
		{
			"name": "create Student 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Response status code is 201\", function () {\r",
							"  pm.expect(pm.response.code).to.equal(201);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"ID is a non-negative integer\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData.id).to.be.a('number');\r",
							"    pm.expect(responseData.id).to.be.at.least(0, \"ID should be a non-negative integer\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "localhost:8080/students/?name=test1&skype=test1&telegram=test1&github=test1&botScore=999",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"students",
						""
					],
					"query": [
						{
							"key": "name",
							"value": "test1"
						},
						{
							"key": "skype",
							"value": "test1"
						},
						{
							"key": "telegram",
							"value": "test1"
						},
						{
							"key": "github",
							"value": "test1"
						},
						{
							"key": "botScore",
							"value": "999"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "create Student2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Response status code is 201\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(201);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Id field should be a number\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.id).to.be.a('number');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Validate isActive field is a boolean\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData.isActive).to.be.a('boolean');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response Content-Type is application/json\", function () {\r",
							"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "localhost:8080/students/?name=test2&skype=test2&telegram=test2&github=test2&botScore=9999",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"students",
						""
					],
					"query": [
						{
							"key": "name",
							"value": "test2"
						},
						{
							"key": "skype",
							"value": "test2"
						},
						{
							"key": "telegram",
							"value": "test2"
						},
						{
							"key": "github",
							"value": "test2"
						},
						{
							"key": "botScore",
							"value": "9999"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "update Student",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 202\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(202);\r",
							"});\r",
							"\r",
							"pm.test(\"BotScore should be 9998\", function () {\r",
							"    pm.expect(pm.response.json().botScore).to.equal(9998);\r",
							"});\r",
							"pm.test(\"Response status code is 202\", function () {\r",
							"    pm.response.to.have.status(202);\r",
							"});\r",
							"\r",
							"pm.test(\"BotScore should be 9998\", function () {\r",
							"    pm.expect(pm.response.json().botScore).to.equal(9998);\r",
							"});\r",
							"\r",
							"pm.test(\"BotScore should be a number\", function () {\r",
							"    pm.expect(pm.response.json().botScore).to.be.a('number');\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"id\": 2,\r\n    \"name\": \"test2\",\r\n    \"skype\": \"test2\",\r\n    \"telegram\": \"test2\",\r\n    \"github\": \"test2\",\r\n    \"botScore\": 9998,\r\n    \"isActive\": true\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "localhost:8080/students/"
			},
			"response": []
		},
		{
			"name": "get all students",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"// Test to check if the response contains the Content-Type header with application/json value",
							"pm.test(\"Valid Content-Type header is present\", function() {",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": "localhost:8080/students/"
			},
			"response": []
		},
		{
			"name": "get student 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Id is a non-negative integer\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.id).to.be.a('number').and.to.satisfy((num) => num >= 0, \"Id should be a non-negative integer\");\r",
							"});\r",
							"\r",
							"pm.test(\"Content type is application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"pm.test(\"Id field is equal to 1\", function () {\r",
							"    pm.expect(pm.response.json().id).to.equal(1);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": "localhost:8080/students/1"
			},
			"response": []
		},
		{
			"name": "create Work",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 201\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(201);\r",
							"});\r",
							"\r",
							"pm.test(\"Response has the required fields - id and date\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData).to.have.property('id');\r",
							"    pm.expect(responseData).to.have.property('date');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": "localhost:8080/works/"
			},
			"response": []
		},
		{
			"name": "Create Attendance",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 201\", function () {\r",
							"  pm.expect(pm.response.code).to.equal(201);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required fields - id, student, work, and present\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.id).to.exist;\r",
							"    pm.expect(responseData.student).to.exist;\r",
							"    pm.expect(responseData.work).to.exist;\r",
							"    pm.expect(responseData.present).to.exist;\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Date is in a valid date format\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.have.property('work');\r",
							"    pm.expect(responseData.work.date).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "localhost:8080/attendance/?studentId=1&workId=1&present=asadfasdfasdf",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"attendance",
						""
					],
					"query": [
						{
							"key": "studentId",
							"value": "1",
							"description": "1"
						},
						{
							"key": "workId",
							"value": "1",
							"description": "1"
						},
						{
							"key": "present",
							"value": "asadfasdfasdf",
							"description": "asdfasdf"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Create grade",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required fields - id, student, work, and grade\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData).to.have.property('id');\r",
							"    pm.expect(responseData).to.have.property('student');\r",
							"    pm.expect(responseData).to.have.property('work');\r",
							"    pm.expect(responseData).to.have.property('grade');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Student and work should not be null\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.student).to.not.be.null;\r",
							"    pm.expect(responseData.work).to.not.be.null;\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Grade is a non-negative integer\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData.grade).to.be.a('number');\r",
							"    pm.expect(responseData.grade).to.be.at.least(0);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "localhost:8080/grade/?studentId=1&workId=1&grade=1",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"grade",
						""
					],
					"query": [
						{
							"key": "studentId",
							"value": "1"
						},
						{
							"key": "workId",
							"value": "1"
						},
						{
							"key": "grade",
							"value": "1"
						}
					]
				}
			},
			"response": []
		}
	]
}